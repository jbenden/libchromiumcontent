#!/usr/bin/env python

import argparse
import os
import subprocess
import sys

from lib.config import get_configuration, get_output_dir


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
VENDOR_DIR = os.path.join(SOURCE_ROOT, 'vendor')
TARGETS = ['chromiumcontent_all']
COMPONENTS = ['static_library', 'shared_library', 'ffmpeg']

NINJA = os.path.join(VENDOR_DIR, 'depot_tools', 'ninja')
if sys.platform == 'win32':
  NINJA = '{0}.exe'.format(NINJA)
elif sys.platform.startswith('freebsd'):
  NINJA = '/usr/local/bin/ninja'


def main():
  args = parse_args()
  target_arch = args.target_arch

  env = os.environ.copy()
  env['PATH'] = os.pathsep.join([os.path.join(VENDOR_DIR, 'depot_tools'),
                                 env['PATH']])
  if sys.platform in ['win32', 'cygwin']:
    env['DEPOT_TOOLS_WIN_TOOLCHAIN'] = '0'

  os.chdir(SOURCE_ROOT)

  for component in COMPONENTS:
    if args.component == 'all' or args.component == component:
      if component == 'shared_library' and args.no_shared_library:
        continue
      out_dir = os.path.join(SOURCE_ROOT, 'src',
                             get_output_dir(target_arch, component))
      config = get_configuration(target_arch)
      config_dir = os.path.relpath(os.path.join(out_dir, config))
      target = 'chromiumcontent:chromiumcontent'
      subprocess.check_call([NINJA, '-C', config_dir, '-j', args.make_jobs, target], env=env)


def parse_args():
  import multiprocessing
  parser = argparse.ArgumentParser(description='Build libchromiumcontent')
  parser.add_argument('-t', '--target_arch', default='x64', help='x64 or ia32')
  parser.add_argument('-c', '--component', default='all',
                      help='static_library or shared_library or all')
  parser.add_argument('-R', '--no_shared_library', action='store_true',
                      help='Do not build shared library version')
  parser.add_argument('-j', '--make_jobs', default=str(multiprocessing.cpu_count()), help='Number of parallel make jobs')
  return parser.parse_args()


if __name__ == '__main__':
    sys.exit(main())
